{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","classNmae","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0c685b56.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-Link  mx-2\" aria-current=\"page\" href=\"#\">Home </a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-Link mx-2\" href=\"#\">{props.aboutText}</a>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n                    <div className={`form-check form-switch text-${[props.mode==='light'? 'dark': 'light']}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label classNmae=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {[props.mode==='light'? 'dark': 'light']} mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"set title here\",\r\n    aboutText: \"about\"\r\n}","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () => {\r\n        // console.log(\"uppercase was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        // console.log(\"lowercase was clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        // console.log(\"lowercase was clicked\");\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared\", \"success\");\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Removed extra spaces\", \"success\");\r\n    }\r\n\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n    //text=\"new text\"; //wrong way to change the state\r\n    //setText(\"new text\"); //Correct way to change the state\r\n    return (\r\n        <>\r\n            <div className=\"conatiner\" style={{color: props.mode==='light'? '#042743': 'white'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" value={text} onChange={handleOnChange} rows=\"8\" style={{backgroundColor: props.mode==='light'? 'white': 'grey', color: props.mode==='light'? '#042743': 'white'}}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}> Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}> Clear Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}> Copy Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='light'? '#042743': 'white'}}>\r\n                <h2>Your text summary</h2>\r\n                <p> {text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{text.split(\" \").length * 0.008} Minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text: 'Enter someting to preview'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }\n      , 1500\n    )\n  }\n  //whether dark mode is enabled or not\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\")\n      document.title = 'TextUtils- DarkMode';\n      // setInterval(()=>{\n      //   document.title=\"Textutils is amazing\";\n      // },2000)\n\n      // setInterval(()=>{\n      //   document.title=\" Install Textutils now\";\n      // },1500)\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\")\n      document.title = 'TextUtils- LightMode';\n    }\n  }\n  return (\n    <>\n\n      {/* <Navbar title=\"Textutils\" aboutText=\"About textutils\"/> */}\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        \n          {/* <Routes>\n            \n            <Route exact path=\"/about\" element={ <About />}>\n             \n            </Route>\n            <Route exact path=\"/\" element={  */}\n              \n              <TextForm showAlert={showAlert} heading=\"Enter the text to analyse below\" mode={mode} />\n              \n              {/* }> */}\n{/*             \n            </Route>\n          </Routes> */}\n\n        \n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}